<div class="weather-local">
  <div class="weather-controls">
    <button id="get-weather" class="weather-btn">Obtener Clima Local</button>
  </div>

  <div id="weather-result" class="weather-result">
    <p>Haz click en el bot√≥n para obtener el clima de tu ubicaci√≥n</p>
  </div>
</div>

<style>
  .weather-local {
    max-width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .weather-controls {
    text-align: center;
    margin-bottom: 1.5rem;
  }

  .weather-btn {
    padding: 0.75rem 1.5rem;
    background: linear-gradient(135deg, var(--cristal), var(--oro));
    color: var(--abismo);
    border: none;
    border-radius: var(--radius);
    cursor: pointer;
    font-weight: 600;
    transition: all var(--transition);
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .weather-btn:hover {
    background: linear-gradient(135deg, var(--oro), var(--cristal));
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(100, 255, 218, 0.3);
  }

  .weather-btn:active {
    transform: translateY(0);
  }

  .weather-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .weather-result {
    flex: 1;
    text-align: center;
    padding: 1.5rem;
    border: 2px solid rgba(100, 255, 218, 0.2);
    border-radius: var(--radius);
    background: linear-gradient(
      135deg,
      rgba(30, 58, 95, 0.3),
      rgba(10, 25, 47, 0.5)
    );
    min-height: 160px;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
  }

  .weather-result:hover {
    border-color: rgba(100, 255, 218, 0.4);
    background: linear-gradient(
      135deg,
      rgba(30, 58, 95, 0.4),
      rgba(10, 25, 47, 0.6)
    );
  }

  .weather-result::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(100, 255, 218, 0.1),
      transparent
    );
    transition: left 1s;
  }

  .weather-result:hover::before {
    left: 100%;
  }

  .weather-card {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    width: 100%;
    animation: fadeIn 0.6s ease-out;
    z-index: 1;
    position: relative;
  }

  .weather-main {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    flex-shrink: 0;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: scale(0.9);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  .weather-icon {
    font-size: 2.5rem;
    margin: 0.3rem 0;
    animation: float 3s ease-in-out infinite;
  }

  @keyframes float {
    0%,
    100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-6px);
    }
  }

  .temperature {
    font-size: 2rem;
    font-weight: bold;
    color: var(--cristal);
    margin: 0.3rem 0;
    text-shadow: 0 2px 8px rgba(100, 255, 218, 0.3);
  }

  .weather-description {
    font-size: 0.9rem;
    color: var(--oro);
    text-transform: capitalize;
    margin-bottom: 1rem;
    font-weight: 500;
  }

  .weather-details {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.8rem;
    margin-top: 0;
    flex: 1;
  }

  .detail {
    padding: 0.5rem;
    background: rgba(100, 255, 218, 0.1);
    border-radius: var(--radius);
    border: 1px solid rgba(100, 255, 218, 0.2);
    transition: all var(--transition);
  }

  .detail:hover {
    background: rgba(100, 255, 218, 0.2);
    transform: translateY(-2px);
  }

  .detail-label {
    font-size: 0.65rem;
    opacity: 0.8;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .detail-value {
    font-weight: bold;
    color: var(--luz);
    font-size: 0.8rem;
    margin-top: 0.25rem;
  }

  .loading {
    color: var(--oro);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-size: 1.1rem;
  }

  .loading::after {
    content: "";
    width: 24px;
    height: 24px;
    border: 3px solid var(--oro);
    border-top: 3px solid transparent;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .error {
    color: #ff6b6b;
    font-size: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .error::before {
    content: "‚ö†Ô∏è";
    font-size: 1.5rem;
  }

  .demo-note {
    margin-top: 1rem;
    font-size: 0.7rem;
    opacity: 0.5;
    font-style: italic;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .weather-card {
      flex-direction: column;
      gap: 1rem;
      text-align: center;
    }

    .weather-details {
      flex-direction: row;
      justify-content: center;
      gap: 1rem;
    }

    .weather-main {
      margin-bottom: 0.5rem;
    }
  }
</style>

<script>
  const getWeatherBtn = document.getElementById("get-weather");
  const weatherResult = document.getElementById("weather-result");

  // API key de OpenWeatherMap (necesitar√≠as registrarte para obtener una real)
  const API_KEY = "demo"; // En un proyecto real, esto deber√≠a estar en variables de entorno

  function getWeatherIcon(code: string): string {
    const iconMap: { [key: string]: string } = {
      "01d": "‚òÄÔ∏è",
      "01n": "üåô",
      "02d": "‚õÖ",
      "02n": "‚òÅÔ∏è",
      "03d": "‚òÅÔ∏è",
      "03n": "‚òÅÔ∏è",
      "04d": "‚òÅÔ∏è",
      "04n": "‚òÅÔ∏è",
      "09d": "üåßÔ∏è",
      "09n": "üåßÔ∏è",
      "10d": "üå¶Ô∏è",
      "10n": "üå¶Ô∏è",
      "11d": "‚õàÔ∏è",
      "11n": "‚õàÔ∏è",
      "13d": "‚ùÑÔ∏è",
      "13n": "‚ùÑÔ∏è",
      "50d": "üå´Ô∏è",
      "50n": "üå´Ô∏è",
    };
    return iconMap[code] || "üå§Ô∏è";
  }

  async function getWeather() {
    if (!navigator.geolocation) {
      if (weatherResult) {
        weatherResult.innerHTML =
          '<p class="error">La geolocalizaci√≥n no est√° soportada en este navegador.</p>';
      }
      return;
    }

    if (weatherResult)
      weatherResult.innerHTML =
        '<p class="loading">Obteniendo ubicaci√≥n...</p>';

    navigator.geolocation.getCurrentPosition(
      async (position) => {
        const { latitude, longitude } = position.coords;

        if (weatherResult)
          weatherResult.innerHTML =
            '<p class="loading">Obteniendo datos del clima...</p>';

        try {
          // Nota: Esta es una demo. En un proyecto real necesitar√≠as:
          // 1. Una API key v√°lida de OpenWeatherMap
          // 2. Configurar CORS adecuadamente
          // 3. Manejar la API key de forma segura

          // Para esta demo, mostramos datos ficticios
          setTimeout(() => {
            if (weatherResult) {
              weatherResult.innerHTML = `
                <div class="weather-card">
                  <div class="weather-main">
                    <div class="weather-icon">üå§Ô∏è</div>
                    <div class="temperature">22¬∞C</div>
                    <div class="weather-description">Parcialmente nublado</div>
                  </div>
                  <div class="weather-details">
                    <div class="detail">
                      <div class="detail-label">Humedad</div>
                      <div class="detail-value">65%</div>
                    </div>
                    <div class="detail">
                      <div class="detail-label">Viento</div>
                      <div class="detail-value">12 km/h</div>
                    </div>
                  </div>
                  <div class="demo-note">* Datos de demostraci√≥n</div>
                </div>
              `;
            }
          }, 1500);

          /* 
          // C√≥digo para API real (descomentado cuando tengas API key):
          const response = await fetch(
            `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric&lang=es`
          );
          
          if (!response.ok) {
            throw new Error('Error al obtener datos del clima');
          }

          const data = await response.json();
          
          if (weatherResult) {
            weatherResult.innerHTML = `
              <div class="weather-card">
                <div class="weather-icon">${getWeatherIcon(data.weather[0].icon)}</div>
                <div class="temperature">${Math.round(data.main.temp)}¬∞C</div>
                <div class="weather-description">${data.weather[0].description}</div>
                <div class="weather-details">
                  <div class="detail">
                    <div class="detail-label">Sensaci√≥n</div>
                    <div class="detail-value">${Math.round(data.main.feels_like)}¬∞C</div>
                  </div>
                  <div class="detail">
                    <div class="detail-label">Humedad</div>
                    <div class="detail-value">${data.main.humidity}%</div>
                  </div>
                  <div class="detail">
                    <div class="detail-label">Viento</div>
                    <div class="detail-value">${Math.round(data.wind.speed * 3.6)} km/h</div>
                  </div>
                  <div class="detail">
                    <div class="detail-label">Presi√≥n</div>
                    <div class="detail-value">${data.main.pressure} hPa</div>
                  </div>
                </div>
                <p style="margin-top: 1rem; font-size: 0.8rem; opacity: 0.7;">
                  üìç ${data.name}, ${data.sys.country}
                </p>
              </div>
            `;
          }
          */
        } catch (error) {
          if (weatherResult) {
            weatherResult.innerHTML =
              '<p class="error">Error al obtener los datos del clima. Intenta de nuevo.</p>';
          }
        }
      },
      (error) => {
        if (weatherResult) {
          weatherResult.innerHTML =
            '<p class="error">No se pudo obtener la ubicaci√≥n. Verifica los permisos de ubicaci√≥n.</p>';
        }
      }
    );
  }

  getWeatherBtn?.addEventListener("click", getWeather);
</script>
