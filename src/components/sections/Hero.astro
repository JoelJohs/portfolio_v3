<section id="hero">
  <div class="hero-content">
    <h1>¡Hola! Soy <span id="heroName" style="color:var(--cristal)"></span></h1>
    <p id="heroDescription"></p>

    <div class="hero-btns">
      <button class="btn primary" id="scrollToProjects">Ver Proyectos</button>
      <a
        href="/documents/CV_Joel_Josafat_Hernández_Saucedo_Es.pdf"
        class="btn secondary"
        download="CV_Joel_Josafat_Hernández_Saucedo_Es.pdf">Descargar CV</a
      >
    </div>
  </div>
</section>

<style>
  #hero {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
  }
  .hero-content h1 {
    font-size: clamp(2rem, 6vw, 3rem);
  }
  .hero-content p {
    margin: 0.5rem 0 2rem;
    color: var(--cristal);
    min-height: 1.5em; /* Para mantener el espacio cuando esté vacío */
    font-size: clamp(0.9rem, 4vw, 1.1rem);
    padding: 0 1rem; /* Padding en móvil */
  }

  /* Cursor parpadeante */
  .cursor {
    animation: blink 1s step-end infinite;
    display: inline-block;
    font-weight: normal;
  }

  @keyframes blink {
    0%,
    50% {
      opacity: 1;
    }
    50.1%,
    100% {
      opacity: 0;
    }
  }

  .hero-btns {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }
  .btn {
    padding: 0.75rem 1.5rem;
    border-radius: var(--radius);
    transition: transform var(--transition);
  }
  .btn.primary {
    background: var(--cristal);
    color: var(--abismo);
  }
  .btn.secondary {
    border: 1px solid var(--cristal);
    color: var(--cristal);
  }
  .btn:hover {
    transform: translateY(-2px);
  }
</style>

<script>
  // Typing effect para el nombre en el hero (en bucle)
  let isTyping = false;
  let typingTimer: number;

  // Tecnologías que puedes modificar fácilmente
  const technologies = [
    "Desarrollador Backend",
    "NodeJS",
    "NestJS",
    "Express",
    "Django.",
  ];

  function typewriterEffect(
    element: HTMLElement,
    text: string,
    speed: number = 120,
    showCursor: boolean = true,
    onComplete?: () => void
  ) {
    let i = 0;
    element.innerHTML = "";

    const timer = setInterval(() => {
      if (i < text.length) {
        const currentText = text.substring(0, i + 1);
        if (showCursor) {
          element.innerHTML = currentText + '<span class="cursor">|</span>';
        } else {
          element.textContent = currentText;
        }
        i++;
      } else {
        clearInterval(timer);

        if (showCursor) {
          // Remover el cursor después de terminar
          element.textContent = text;
        }

        if (onComplete) {
          setTimeout(onComplete, 500); // Espera antes del siguiente texto
        }
      }
    }, speed);
  }

  function typeDescription() {
    const heroDescription = document.getElementById("heroDescription");
    if (!heroDescription) return;

    const fullText = technologies.join(" · ");

    typewriterEffect(heroDescription, fullText, 80, true, () => {
      // Al final, dejar solo el texto sin cursor
      heroDescription.textContent = fullText;

      // Reiniciar el ciclo después de 1 minuto
      typingTimer = window.setTimeout(() => {
        startTypingLoop();
      }, 60000);
    });
  }

  function startTypingLoop() {
    // Limpiar el contenido anterior
    const heroName = document.getElementById("heroName");
    const heroDescription = document.getElementById("heroDescription");

    if (heroName) heroName.innerHTML = "";
    if (heroDescription) heroDescription.innerHTML = "";

    isTyping = true;

    // Primero escribir "Joel" con cursor
    if (heroName) {
      typewriterEffect(heroName, "Joel", 80, true, () => {
        // Después escribir la descripción
        setTimeout(() => {
          typeDescription();
          isTyping = false;
        }, 100);
      });
    }
  }

  // Iniciar el efecto cuando carga la página
  document.addEventListener("DOMContentLoaded", () => {
    // Esperar un poco antes del primer efecto para que se vea el loading
    setTimeout(() => {
      startTypingLoop();
    }, 800);

    // Funcionalidad del botón "Ver Proyectos"
    const scrollToProjectsBtn = document.getElementById("scrollToProjects");
    if (scrollToProjectsBtn) {
      scrollToProjectsBtn.addEventListener("click", () => {
        const projectsSection = document.getElementById("projects");
        if (projectsSection) {
          projectsSection.scrollIntoView({
            behavior: "smooth",
            block: "start",
          });
        }
      });
    }
  });
</script>
