---
export interface Props {
  title: string;
}
const { title } = Astro.props;

import Footer from "../components/sections/Footer.astro";
import MusicPlayer from "../components/ui/MusicPlayer.astro";
import Navbar from "../components/ui/Navbar.astro";
import TrophyModal from "../components/ui/TrophyModal.astro";
import Particles3D from "../components/ui/Particles3D.astro";
import ParticlesToggle from "../components/ui/ParticlesToggle.astro";
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <!-- Fuentes -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <!-- Part√≠culas CSS (por defecto) -->
    <div class="particles-container" id="particles"></div>

    <!-- Part√≠culas 3D con Three.js -->
    <Particles3D />

    <Navbar />

    <slot />
    <Footer />
    <TrophyModal />
    <MusicPlayer />
    <ParticlesToggle />
  </body>
</html>

<style is:global>
  /* Estilos globales */
  :root {
    --abismo: #0a192f;
    --niebla: #1e3a5f;
    --cristal: #64ffda;
    --luz: #e6f1ff;
    --oro: #d4af37;
    --dark-bg: #050c17;
    --dark-surface: #0f172a;
    --dark-primary: #36d4a0;
    --dark-secondary: #ffc857;
    --dark-text: #e2e8f0;
    --radius: 8px;
    --transition: 0.3s ease;
    --font: "Inter", system-ui, sans-serif;
  }
  [data-theme="dark"] {
    --abismo: var(--dark-bg);
    --niebla: var(--dark-surface);
    --cristal: var(--dark-primary);
    --luz: var(--dark-text);
    --oro: var(--dark-secondary);
  }
  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }
  html,
  body {
    height: 100%;
    scroll-behavior: smooth;
    scroll-snap-type: y proximity;
  }
  body {
    font-family: var(--font);
    background: var(--abismo);
    color: var(--luz);
    line-height: 1.6;
    font-size: clamp(0.9rem, 2.5vw, 1rem);
    transition:
      background var(--transition),
      color var(--transition);
    overflow-x: hidden;
  }
  .container {
    width: 90%;
    max-width: 960px;
    margin: auto;
  }
  h2 {
    font-size: clamp(1.5rem, 5vw, 2.2rem);
    margin-bottom: 1.5rem;
    text-align: center;
  }
  a {
    color: var(--cristal);
    transition: color var(--transition);
  }
  section {
    padding: 4rem 0;
    scroll-snap-align: start;
    min-height: 90vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  /* Ajustes espec√≠ficos para el scroll-snap */
  #hero {
    scroll-snap-align: start;
    min-height: 100vh;
  }

  #about,
  #projects,
  #contact {
    scroll-snap-align: start;
    min-height: 90vh;
  }

  /* Asegurar que el navbar no interfiera con el scroll-snap */
  header {
    scroll-snap-align: none;
  }

  /* Mejorar el scroll en m√≥viles */
  @media (max-width: 768px) {
    html,
    body {
      scroll-snap-type: none;
    }

    section {
      min-height: auto;
      padding: 3rem 0;
      scroll-snap-align: none;
    }
  }

  /* Part√≠culas */
  .particles-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    pointer-events: none;
    overflow: hidden;
  }
  .particle {
    position: absolute;
    width: 3px;
    height: 3px;
    background: var(--cristal);
    border-radius: 50%;
    opacity: 0.6;
    animation: float 25s infinite linear;
    box-shadow: 0 0 6px var(--cristal);
  }
  @keyframes float {
    0% {
      transform: translateY(100vh) rotate(0deg);
    }
    100% {
      transform: translateY(-100vh) rotate(360deg);
    }
  }

  /* TOAST */
  .toast {
    position: fixed;
    bottom: 5rem;
    left: 50%;
    transform: translateX(-50%);
    background: var(--oro);
    color: var(--abismo);
    padding: 0.5rem 1rem;
    border-radius: var(--radius);
    z-index: 999;
    animation: fadeIn 0.3s;
  }
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translate(-50%, 10px);
    }
    to {
      opacity: 1;
      transform: translate(-50%, 0);
    }
  }

  @media (max-width: 640px) {
    nav ul {
      display: none;
      flex-direction: column;
      gap: 1rem;
      position: absolute;
      top: 100%;
      right: 0;
      background: var(--abismo);
      padding: 1rem;
      border-radius: var(--radius);
    }
    .hamburger {
      display: flex;
    }
  }
</style>

<script is:inline>
  /* PART√çCULAS */
  const pContainer = document.getElementById("particles");
  if (pContainer) {
    for (let i = 0; i < 60; i++) {
      const p = document.createElement("div");
      p.className = "particle";
      p.style.left = Math.random() * 100 + "vw";
      p.style.animationDelay = Math.random() * 25 + "s";
      p.style.animationDuration = 20 + Math.random() * 10 + "s";
      pContainer.appendChild(p);
    }
  }

  const logrosData = [
    {
      id: "copiarEmail",
      name: "Rastro digital",
      hint: "¬øD√≥nde guardo mi correo?",
    },
    {
      id: "visitoProyectos",
      name: "Explorador curioso",
      hint: "Mira todos los tipos de proyectos.",
    },
    {
      id: "modoOscuro",
      name: "Sombras activadas",
      hint: "‚Üë‚Üë‚Üì‚Üì‚Üê‚Üí‚Üê‚Üí... ¬øque segu√≠a?",
    },
    {
      id: "tripleClick",
      name: "Toque insistente",
      hint: "El logo no es un bot√≥n‚Ä¶ o s√≠.",
    },
    {
      id: "explorarCodigo",
      name: "Explorador de c√≥digo",
      hint: "Mira detr√°s del tel√≥n...",
    },
    {
      id: "reprodujoMusica",
      name: "Ritmo retro",
      hint: "Escucha el ambiente.",
    },
    {
      id: "modoClaro",
      name: "Aurora digital",
      hint: "Repite la secuencia antigua...",
    },
    {
      id: "datoCurioso",
      name: "Paciente del c√≥digo",
      hint: "Qu√©date quieto un minuto.",
    },
    {
      id: "particulas3D",
      name: "Dimensi√≥n extra",
      hint: "Cambia el tipo de part√≠culas.",
    },
  ];

  const LS_ACHIEVEMENTS = "achievements";
  const achievements = new Set(
    JSON.parse(localStorage.getItem(LS_ACHIEVEMENTS) || "[]")
  );

  /* PROJECTS VISIT ACHIEVEMENT */
  document.addEventListener("DOMContentLoaded", () => {
    const projectsSection = document.getElementById("projects");
    if (projectsSection) {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              window.trackAchieve("visitoProyectos");
              observer.unobserve(entry.target);
            }
          });
        },
        { threshold: 0.5 }
      );

      observer.observe(projectsSection);
    }
  });

  /* UTILS GLOBALES */
  window.trackAchieve = (k) => {
    console.log("Attempting to track achievement:", k);
    if (achievements.has(k)) {
      console.log("Achievement already unlocked:", k);
      return;
    }
    achievements.add(k);
    localStorage.setItem(LS_ACHIEVEMENTS, JSON.stringify([...achievements]));
    window.dispatchEvent(new CustomEvent("achievementUnlocked", { detail: k }));
    const achievement = logrosData.find((l) => l.id === k);
    if (achievement) {
      console.log("Achievement unlocked:", achievement.name);
      showToast(`üèÜ ${achievement.name}`);
    } else {
      console.log("Achievement data not found for:", k);
    }
  };

  function showToast(msg) {
    const t = document.createElement("div");
    t.className = "toast";
    t.textContent = msg;
    t.style.cssText = `
      position: fixed; bottom: 5rem; left: 50%; transform: translateX(-50%);
      background: var(--oro); color: var(--abismo); padding: .5rem 1rem;
      border-radius: var(--radius); z-index: 999; font-weight: 600;
    `;
    document.body.appendChild(t);
    setTimeout(() => t.remove(), 3000);
  }

  /* KONAMI CODE */
  let konamiSequence = [];
  const KONAMI_CODE = [
    "ArrowUp",
    "ArrowUp",
    "ArrowDown",
    "ArrowDown",
    "ArrowLeft",
    "ArrowRight",
    "ArrowLeft",
    "ArrowRight",
    "KeyB",
    "KeyA",
  ];

  // Variables para gestos t√°ctiles
  let touchSequence = [];
  let touchStartX = 0;
  let touchStartY = 0;
  let touchEndX = 0;
  let touchEndY = 0;
  const minSwipeDistance = 50;

  // Detectar direcci√≥n de swipe
  function getSwipeDirection(startX, startY, endX, endY) {
    const deltaX = endX - startX;
    const deltaY = endY - startY;

    if (
      Math.abs(deltaX) < minSwipeDistance &&
      Math.abs(deltaY) < minSwipeDistance
    ) {
      return null;
    }

    if (Math.abs(deltaX) > Math.abs(deltaY)) {
      return deltaX > 0 ? "ArrowRight" : "ArrowLeft";
    } else {
      return deltaY > 0 ? "ArrowDown" : "ArrowUp";
    }
  }

  // Touch events para mobile
  let touchCount = 0;
  let lastTouchTime = 0;

  window.addEventListener("touchstart", (e) => {
    touchStartX = e.touches[0].clientX;
    touchStartY = e.touches[0].clientY;

    // Detectar doble tap para B y A
    const currentTime = Date.now();
    if (currentTime - lastTouchTime < 300) {
      touchCount++;
      if (touchCount === 2) {
        touchSequence.push("KeyB");
        touchCount = 0;
      } else if (touchCount === 3) {
        touchSequence.push("KeyA");
        touchCount = 0;
      }
    } else {
      touchCount = 1;
    }
    lastTouchTime = currentTime;
  });

  window.addEventListener("touchend", (e) => {
    touchEndX = e.changedTouches[0].clientX;
    touchEndY = e.changedTouches[0].clientY;

    const direction = getSwipeDirection(
      touchStartX,
      touchStartY,
      touchEndX,
      touchEndY
    );
    if (direction) {
      touchSequence.push(direction);
      if (touchSequence.length > 10) touchSequence.shift();

      // Verificar secuencia Konami con gestos
      if (touchSequence.join() === KONAMI_CODE.join()) {
        console.log("KONAMI CODE DETECTED via touch!");
        const dark = document.documentElement.dataset.theme === "dark";
        document.documentElement.dataset.theme = dark ? "" : "dark";
        window.trackAchieve(dark ? "modoClaro" : "modoOscuro");
        touchSequence = [];
      }
    }
  });

  // C√≥digo Konami con teclado (original)
  window.addEventListener("keydown", (e) => {
    konamiSequence.push(e.code);
    if (konamiSequence.length > 10) konamiSequence.shift();
    console.log("Current sequence:", konamiSequence.join(","));
    console.log("Target sequence:", KONAMI_CODE.join(","));
    if (konamiSequence.join() === KONAMI_CODE.join()) {
      console.log("KONAMI CODE DETECTED!");
      const dark = document.documentElement.dataset.theme === "dark";
      document.documentElement.dataset.theme = dark ? "" : "dark";
      window.trackAchieve(dark ? "modoClaro" : "modoOscuro");
      konamiSequence = [];
    }
  });

  // Alternativa simple: 10 taps r√°pidos en la esquina superior derecha
  let rapidTaps = 0;
  let tapTimer;

  window.addEventListener("touchstart", (e) => {
    const touch = e.touches[0];
    const x = touch.clientX;
    const y = touch.clientY;

    // Esquina superior derecha (√∫ltimos 80px de ancho y primeros 80px de alto)
    if (x > window.innerWidth - 80 && y < 80) {
      rapidTaps++;
      clearTimeout(tapTimer);

      if (rapidTaps >= 10) {
        const dark = document.documentElement.dataset.theme === "dark";
        document.documentElement.dataset.theme = dark ? "" : "dark";
        window.trackAchieve(dark ? "modoClaro" : "modoOscuro");
        rapidTaps = 0;
      } else {
        tapTimer = setTimeout(() => {
          rapidTaps = 0;
        }, 2000);
      }
    } else {
      rapidTaps = 0;
    }
  });

  /* DEVELOPER TOOLS DETECTION ACHIEVEMENT */
  let devtools = { open: false, orientation: null };
  const threshold = 160;

  function detectDevTools() {
    if (
      window.outerHeight - window.innerHeight > threshold ||
      window.outerWidth - window.innerWidth > threshold
    ) {
      if (!devtools.open) {
        devtools.open = true;
        window.trackAchieve("explorarCodigo");
      }
    } else {
      devtools.open = false;
    }
  }

  // Detectar cuando se abren las herramientas de desarrollador
  window.addEventListener("resize", detectDevTools);
  document.addEventListener("keydown", (e) => {
    // F12 o Ctrl+Shift+I o Ctrl+Shift+J
    if (
      e.key === "F12" ||
      (e.ctrlKey && e.shiftKey && (e.key === "I" || e.key === "J"))
    ) {
      setTimeout(detectDevTools, 100);
    }
  });

  // Detecci√≥n alternativa para mobile: cambio de orientaci√≥n + viewport changes
  let initialViewport = {
    width: window.innerWidth,
    height: window.innerHeight,
  };
  let orientationChangeCount = 0;

  window.addEventListener("orientationchange", () => {
    setTimeout(() => {
      const newWidth = window.innerWidth;
      const newHeight = window.innerHeight;

      // Si despu√©s del cambio de orientaci√≥n el viewport es significativamente diferente
      // y no corresponde a un cambio normal de orientaci√≥n, podr√≠a ser devtools
      orientationChangeCount++;

      if (orientationChangeCount >= 3) {
        window.trackAchieve("explorarCodigo");
      }
    }, 500);
  });

  // Detecci√≥n por console usage (m√°s confiable en mobile)
  let consoleUsed = false;
  const originalLog = console.log;
  const originalError = console.error;
  const originalWarn = console.warn;

  console.log = function (...args) {
    if (!consoleUsed) {
      consoleUsed = true;
      setTimeout(() => window.trackAchieve("explorarCodigo"), 1000);
    }
    return originalLog.apply(console, args);
  };

  console.error = function (...args) {
    if (!consoleUsed) {
      consoleUsed = true;
      setTimeout(() => window.trackAchieve("explorarCodigo"), 1000);
    }
    return originalError.apply(console, args);
  };

  console.warn = function (...args) {
    if (!consoleUsed) {
      consoleUsed = true;
      setTimeout(() => window.trackAchieve("explorarCodigo"), 1000);
    }
    return originalWarn.apply(console, args);
  };

  // Alternativa simple para mobile: 5 taps r√°pidos en la esquina inferior izquierda
  let debugTaps = 0;
  let debugTimer;

  window.addEventListener("touchstart", (e) => {
    const touch = e.touches[0];
    const x = touch.clientX;
    const y = touch.clientY;

    // Esquina inferior izquierda (primeros 80px de ancho y √∫ltimos 80px de alto)
    if (x < 80 && y > window.innerHeight - 80) {
      debugTaps++;
      clearTimeout(debugTimer);

      if (debugTaps >= 5) {
        window.trackAchieve("explorarCodigo");
        debugTaps = 0;
      } else {
        debugTimer = setTimeout(() => {
          debugTaps = 0;
        }, 2000);
      }
    } else {
      debugTaps = 0;
    }
  });

  /* LOGROS MODAL SHORTCUT - Ctrl+L */
  window.addEventListener("keydown", (e) => {
    if (e.ctrlKey && e.key.toLowerCase() === "l") {
      e.preventDefault();
      window.dispatchEvent(new CustomEvent("openAchievementsModal"));
    }
  });

  /* INACTIVITY ACHIEVEMENT */
  let idle;
  const resetIdle = () => {
    clearTimeout(idle);
    idle = setTimeout(() => window.trackAchieve("datoCurioso"), 60000);
  };
  ["mousemove", "keydown", "scroll"].forEach((evt) =>
    window.addEventListener(evt, resetIdle)
  );
  resetIdle();
</script>
